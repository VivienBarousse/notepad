#!/usr/bin/env ruby

require 'opencv'
require File.expand_path('../../lib/notepad', __FILE__)

include Notepad

window = OpenCV::GUI::Window.new("Keyboard!")

capture = OpenCV::CvCapture.open

loop do


image = capture.query
black_image = image.BGR2GRAY

canny = black_image.canny(50, 150)
contour = canny.find_contours(:mode => OpenCV::CV_RETR_LIST, :method => OpenCV::CV_CHAIN_APPROX_SIMPLE)

candidates = []

begin
  box = contour.bounding_rect

  # Heuristics to remove bad contour
  # Contours too small
  next unless box.width > 10
  # Contours with the wrong height-width ratio
  next unless box.width * 2 < box.height

  candidates << Rectangle.new(box.top_left.y, box.bottom_right.y, box.top_left.x, box.bottom_right.x)
  # image.rectangle! box.top_left, box.bottom_right, :color => OpenCV::CvColor::Green

end while contour = contour.h_next

expanded_candidates = candidates.map do |r1|
  candidates.each do |r2|
    next if r1 == r2
    if r1.intersect_area(r2) > ([r1.area, r2.area].min) * 95 / 100
      r1 = Rectangle.new(
        [r1.top, r2.top].min,
        [r1.bottom, r2.bottom].max,
        [r1.left, r2.left].min,
        [r1.right, r2.right].max
      )
    end
  end
  r1
end
expanded_candidates.uniq!

expanded_candidates.sort_by! do |r|
  r.left
end

groups = []

expanded_candidates.each do |r|
  included = false
  groups.each do |g|
    if (g.last.top - r.top).abs < 20 &&
        (g.last.bottom - r.bottom).abs < 20 &&
        (g.last.right - r.left).abs < 10
      g << r
      included = true
    end
  end
  unless included
    groups << [r]
  end
end

keyboard = groups.first || []
groups.each do |g|
  keyboard = g.length > keyboard.length ? g : keyboard
end

keyboard.each do |r|
  image.rectangle! OpenCV::CvPoint.new(r.left, r.top), OpenCV::CvPoint.new(r.right, r.bottom), :color => OpenCV::CvColor::Red
end

image.save("./foo.jpeg")
window.show image
break if OpenCV::GUI.wait_key 100

end
